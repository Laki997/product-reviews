services:
  product-service:
    container_name: product-service
    build: ./product-service
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      # postgres:
      #   condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./product-service:/app
      - /app/node_modules
      # - /app/dist
    networks:
      - product-reviews-network

  review-processing-service:
    # container_name: review-processing-service
    build: ./review-processing-service
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      # postgres:
      #   condition: service_healthy
      rabbitmq:
        condition: service_healthy
      # redis:
      #   condition: service_healthy
    volumes:
      - ./review-processing-service:/app
      - /app/node_modules
      - ./product-service/node_modules/.prisma:/app/node_modules/.prisma
    networks:
      - product-reviews-network
    deploy:
      replicas: 2

  postgres:
    container_name: postgres
    image: postgres:15-alpine
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - product-reviews-network
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U postgres"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.9-management
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - product-reviews-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - product-reviews-network

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:

networks:
  product-reviews-network:
    driver: bridge
